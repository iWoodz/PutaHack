buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'SpongePowered'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            name = 'forge'
            url = 'https://files.minecraftforge.net/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

plugins {
    id 'java'
    id 'de.fuerstenau.buildconfig' version '1.1.4'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'de.fuerstenau.buildconfig'

version project.modVersion
group project.modGroup //http://maven.apache.org/guides/mini/guide-naming-conventions.html

def execute(String cmd) {
    try {
        def stdout = new ByteArrayOutputStream()

        exec {
            commandLine cmd.split(" ")
            standardOutput = stdout
        }

        return stdout.toString().trim()
    } catch (ignored) {
        return null
    }
}

buildConfig {
    /*
     * The name of the client
     * this line of code is protected by the federal government and if you rename this, C02 will be found inside your air conditioning unit without you knowing
     * your C02 sensors will be turned off as a result as well
     */
    buildConfigField "String", "NAME", "Starstruck"
    buildConfigField "String", "HASH", "${execute("git rev-parse --short HEAD")}"
    buildConfigField "String", "BRANCH", "${execute("git branch").replace("* ", "")}"
    buildConfigField "String", "VERSION", "${project.modVersion}"
    buildConfigField "int", "BUILD_NUMBER", "${project.build_number}"

    packageName "dev.starstruck.util"
}

sourceSets.main.java.srcDirs += "build/gen/buildconfig/src/main"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = project.forgeVersion
    runDir = 'run'
    mappings = project.mcpVersion
    coreMod = 'dev.starstruck.mixin.MixinPluginLoader'
    makeObfSourceJar = false
}

repositories {
    mavenCentral()
    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/maven/'
    }
    maven {
        name = 'impactdevelopment-repo'
        url = 'https://impactdevelopment.github.io/maven/'
    }
    maven {
        name = 'jitpack.io'
        url = "https://jitpack.io"
    }
}

configurations {
    dependency
    implementation.extendsFrom dependency
}

dependencies {
    dependency('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }

    annotationProcessor('org.spongepowered:mixin:0.8.2:processor') {
        exclude module: 'gson'
    }

    compile 'com.github.cabaletta:baritone:1.2.14'
    compile 'cabaletta:baritone-api:1.2'

    dependency 'club.minnced:java-discord-rpc:2.0.2'

    implementation configurations.dependency
}

task getDeps(type: Copy) {
    from sourceSets.main.runtimeClasspath
    into 'runtime/'
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

mixin {
    defaultObfuscationEnv searge
    add sourceSets.main, 'mixins.starstruck.refmap.json'
}

jar {
    from(configurations.dependency.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'dummyThing',
                'LICENSE.txt',
                'META-INF/MUMFREY.RSA',
                'META-INF/maven/**',
                'org/**/*.html'
    }

    manifest {
        attributes(
                'MixinConfigs': 'mixins.starstruck.json',
                'tweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0,
                'FMLCorePluginContainsFMLMod': 'true',
                'FMLCorePlugin': 'dev.starstruck.mixin.MixinPluginLoader',
                //'ForceLoadAsMod': 'true'
        )
    }
}
